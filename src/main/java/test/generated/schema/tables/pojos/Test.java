/*
 * This file is generated by jOOQ.
 */
package test.generated.schema.tables.pojos;


import javax.annotation.Generated;

import test.generated.schema.tables.interfaces.ITest;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Test implements ITest {

    private static final long serialVersionUID = -782556965;

    private Integer foo;
    private String  bar;

    public Test() {}

    public Test(ITest value) {
        this.foo = value.getFoo();
        this.bar = value.getBar();
    }

    public Test(
        Integer foo,
        String  bar
    ) {
        this.foo = foo;
        this.bar = bar;
    }

    @Override
    public Integer getFoo() {
        return this.foo;
    }

    @Override
    public Test setFoo(Integer foo) {
        this.foo = foo;
        return this;
    }

    @Override
    public String getBar() {
        return this.bar;
    }

    @Override
    public Test setBar(String bar) {
        this.bar = bar;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Test other = (Test) obj;
        if (foo == null) {
            if (other.foo != null)
                return false;
        }
        else if (!foo.equals(other.foo))
            return false;
        if (bar == null) {
            if (other.bar != null)
                return false;
        }
        else if (!bar.equals(other.bar))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.foo == null) ? 0 : this.foo.hashCode());
        result = prime * result + ((this.bar == null) ? 0 : this.bar.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Test (");

        sb.append(foo);
        sb.append(", ").append(bar);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(ITest from) {
        setFoo(from.getFoo());
        setBar(from.getBar());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends ITest> E into(E into) {
        into.from(this);
        return into;
    }
}
