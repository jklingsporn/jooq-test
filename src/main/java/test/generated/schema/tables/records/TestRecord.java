/*
 * This file is generated by jOOQ.
 */
package test.generated.schema.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;

import test.generated.schema.tables.Test;
import test.generated.schema.tables.interfaces.ITest;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRecord extends TableRecordImpl<TestRecord> implements Record2<Integer, String>, ITest {

    private static final long serialVersionUID = -109906574;

    /**
     * Setter for <code>public.test.foo</code>.
     */
    @Override
    public TestRecord setFoo(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.test.foo</code>.
     */
    @Override
    public Integer getFoo() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.test.bar</code>.
     */
    @Override
    public TestRecord setBar(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.test.bar</code>.
     */
    @Override
    public String getBar() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Test.TEST.FOO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Test.TEST.BAR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getFoo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getBar();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getFoo();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getBar();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value1(Integer value) {
        setFoo(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value2(String value) {
        setBar(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord values(Integer value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(ITest from) {
        setFoo(from.getFoo());
        setBar(from.getBar());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends ITest> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(Integer foo, String bar) {
        super(Test.TEST);

        set(0, foo);
        set(1, bar);
    }
}
